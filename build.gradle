apply plugin: 'java'
apply plugin: 'maven'

group = 'com.cloudant'
version = '1.0.2-SNAPSHOT'
//note this description is used as the user agent name in the client properties
description = """java-cloudant"""

sourceCompatibility = 1.6
targetCompatibility = 1.6



repositories {

    maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.3'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.2.4'
    testCompile group: 'junit', name: 'junit', version: '4.8.2'
}

tasks.withType(Test) {
    // pick up properties named test.* from command line, gradle.properties first
    System.properties.each { prop ->
        if (prop.key.startsWith("test")) {
            systemProperty prop.key, prop.value
        }
    }
}

test {
    useJUnit {
        excludeCategories 'com.cloudant.test.main.RequiresCloudant'
    }
}

task cloudantTest(type: Test, dependsOn: testClasses) {
    useJUnit {
        excludeCategories 'com.cloudant.test.main.RequiresCloudantService'
    }
}

task cloudantServiceTest(type: Test, dependsOn: testClasses) {
    // Run all tests
}

//task for generating a client properties file
class ClientProperties extends DefaultTask {

    //allow this to be configured, default to client.properties
    File clientPropsPath = new File("client.properties")

    //internal
    private Properties p = new Properties()

    ClientProperties() {
        //if there is a generated file already load the values
        if (clientPropsPath.exists()) {
            p.load(new FileInputStream(clientPropsPath));
        }
    }

    @TaskAction
    def save() {
        p.put("user.agent.name", project.description)
        p.put("user.agent.version", project.version)
        p.store(new FileOutputStream(clientPropsPath), "User agent information for this client")
    }

    String getPropertyValue(String key) {
        return p.getProperty(key)
    }
}

//generate a client props file, make the jar task depend on this
task generateClientPropertiesFile(type: ClientProperties) {
    clientPropsPath = new File(buildDir, "tmp/client.properties")
    outputs.upToDateWhen {
        project.description.equals(getPropertyValue("user.agent.name")) && project.version.equals(getPropertyValue("user.agent.version"))
    }
}
jar.dependsOn generateClientPropertiesFile
//include the client props in the built jar
jar {
    into "META-INF", { from generateClientPropertiesFile.clientPropsPath }
}
